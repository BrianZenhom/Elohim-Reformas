---
import Navbar from "./Navbar.astro";
import Footer from "./Footer.astro";

interface Props {
  client: 'browser';
}

const { client } = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Elohim Reformas</title>
  </head>
  <Navbar client="browser" />
  <body>
    <main>
      <slot />
    </main>
  </body>
  <Footer client="browser" />
</html>

<style is:global>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  @font-face {
    font-family: "Onest";
    src: url("/fonts/onest-latin-100-normal.woff");
    font-weight: 100;
    font-style: normal;
  }

  @font-face {
    font-family: "Onest";
    src: url("/fonts/onest-latin-200-normal.woff");
    font-weight: 200;
    font-style: normal;
  }

  @font-face {
    font-family: "Onest";
    src: url("/fonts/onest-latin-300-normal.woff");
    font-weight: 300;
    font-style: normal;
  }

  @font-face {
    font-family: "Onest";
    src: url("/fonts/onest-latin-400-normal.woff");
    font-weight: 400;
    font-style: normal;
  }

  @font-face {
    font-family: "Onest";
    src: url("/fonts/onest-latin-500-normal.woff");
    font-weight: 500;
    font-style: normal;
  }

  @font-face {
    font-family: "Onest";
    src: url("/fonts/onest-latin-600-normal.woff");
    font-weight: 600;
    font-style: normal;
  }

  @font-face {
    font-family: "Onest";
    src: url("/fonts/onest-latin-700-normal.woff");
    font-weight: 700;
    font-style: normal;
  }

  @font-face {
    font-family: "Onest";
    src: url("/fonts/onest-latin-800-normal.woff");
    font-weight: 800;
    font-style: normal;
  }

  @font-face {
    font-family: "Onest";
    src: url("/fonts/onest-latin-900-normal.woff");
    font-weight: 900;
    font-style: normal;
  }

  @font-face {
    font-family: "Roboto";
    src: url("/fonts/Roboto-Regular.woff");
    font-weight: 400;
    font-style: normal;
  }

  @font-face {
    font-family: "RobotoItalic";
    src: url("/fonts/Roboto-Italic.woff");
    font-weight: 400;
    font-style: italic;
  }

  html,
  body {
    background-color: #f5efe7;
    color: #1a3347;
    font-family:
      "Onest",
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      "Segoe UI",
      Roboto,
      Oxygen,
      Ubuntu,
      Cantarell,
      "Open Sans",
      "Helvetica Neue",
      sans-serif;
    scroll-behavior: smooth;
    overflow-x: hidden;
    overflow-y: auto;
    width: 100vw;
  }

  a {
    display: inline-block;
    line-height: 0;
  }

  p {
    font-family:
      "Roboto",
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      "Segoe UI",
      Roboto,
      Oxygen,
      Ubuntu,
      Cantarell,
      "Open Sans",
      "Helvetica Neue",
      sans-serif;
    line-height: 1.3;
    text-wrap: pretty;
  }

  section {
    max-width: 1280px;
    margin: 0 auto;
  }

  .hero {
    position: relative;
    width: 100%;
  }

  .about-line {
    content: '';
      height: 1px;
      background: linear-gradient(to right, #1a334700, #000000, #e98a1500);
      margin: 0;
      max-width: 1280px;
      margin: 0 auto;
    }

    
</style>

<script>
  // Get all navigation links and sections
  const navLinks = document.querySelectorAll('.nav-links a');
  const sections = document.querySelectorAll('section');

  // Function to scroll to section with offset
  const scrollToSection = (id) => {
    const section = document.querySelector(`#${id}`);
    if (section) {
      const offset = 100; // Offset for header and fixed elements
      const targetPosition = section.offsetTop - offset;
      window.scrollTo({
        top: targetPosition,
        behavior: 'smooth'
      });
    }
  };

  // Function to update active link based on scroll position
  const updateActiveLink = () => {
    let current = '';
    
    // Check if we're at the top of the page
    if (window.scrollY < 100) {
      current = 'inicio';
    } else {
      sections.forEach(section => {
        const sectionTop = section.offsetTop;
        const sectionHeight = section.clientHeight;
        const sectionId = section.getAttribute('id');
        const offset = 80; // Add an offset to account for the header and any other fixed elements
        
        if (sectionId && window.scrollY >= (sectionTop - sectionHeight / 3 - offset)) {
          current = sectionId;
        }
      });
    }

    navLinks.forEach(link => {
      link.classList.remove('active');
      const href = link.getAttribute('href');
      const linkText = link.textContent?.toLowerCase() || '';
      
      // Handle both / and /inicio for the home link
      if (current === 'inicio' && (href === '#' || href === '#inicio')) {
        link.classList.add('active');
      } else if (href && href === `#${current}`) {
        link.classList.add('active');
      }
    });
  };

  // Initial check
  updateActiveLink();

  // Add click event listeners to navigation links
  navLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const href = link.getAttribute('href');
      if (href) {
        const targetId = href.replace('#', '');
        scrollToSection(targetId);
      }
    });
  });

  // Add scroll event listener
  window.addEventListener('scroll', updateActiveLink);
</script>
